library(kernlab)
utils:::menuInstallPkgs()
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
names(trainSpam)
args(binom)
args(rbinom)
2314+2287
trainSpam=spam[trainIndicator==1, ]
testSpam=spam[trainIndicator==0, ]
dim(trainSpam)
?dim
names(trainSpam)
spam
head(spam)
name(spam)
names(spam)
library(xlsx)
install.packages('rJava')
library(xlsx)
library(rJava)
install.packages('XML')
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
library(RCurl)
install.packages("RCurl")
library(RCurl)
xData <- getURL(fileURL)
xData <- getURL(fileUrl)
fileUrl
doc <- xmlParse(xData)
doc <- xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
curlVersion()$features
curlVersion()$protocol
doc <- xmlTreeParse(sub("s", "", fileUrl), useInternal = TRUE)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode=21231", xmlValue)
xpathSApply(rootNode, node[@zipcode="21231"], xmlValue)
?xpathSApply
xpathSApply(rootNode, "//zipcode", xmlValue="21231")
xpathSApply(rootNode, "//zipcode", xmlValue=21231)
xpathSApply(rootNode, "//zipcode"=21231, xmlValue)
xpathSApply(rootNode, "//zipcode"="21231", xmlValue)
q()
getwd()
library(xlsx)
install.packages('rJava')
library(xlsx)
library(rJava)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
colMeans(iris)
type(iris)
head(iris)
dat(mtcars)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
levels(mtcars$cyl)
factors(mtcars$cyl)
head(mtcars)
split(mtcars$mpg, mtcars$cyl)
x <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
x[2]
x[3]-x[1]
x
abs(x[3]-x[1])
iris
head(iris)
mean(iris$Sepal.Length)
lapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
x <- with(mtcars, tapply(h[], cyl, mean))
x <- with(mtcars, tapply(hp, cyl, mean))
x
abs(x[3]-x[1])
?with
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
stepint <- melt(data[, c(1, 3)], id = "interval")
format(0.5, %)
format(0.5, "%")
example(format)
?percent
?percent_format
?merge
?select
stepintsumm
getwd()
setwd("/r/repres/repdata_peerassessment1")
setwd("./r/repres/repdata_peerassessment1")
data <- read.csv(unz("./activity.zip", "activity.csv"))
data$date <- as.Date(data$date, "%Y-%m-%d") # format date vars to R date
stepsummary <- melt(data[, 1:2], id = "date")
stepsumm <- dcast(stepsummary, date ~ variable, fun.aggregate = sum, na.rm = TRUE)
datecount <- as.numeric(max(data$date)-min(data$date))
hist(stepsumm$steps, xlab = "Total Daily Step Counts", main = paste("Histogram of Total Step Counts per day \nover", datecount, "days"), breaks=15) #plot histogram
stepmean <- format(mean(stepsumm$steps), nsmall=2) # calculate the mean daily step counts (over 60 days)
stepmed <- format(median(stepsumm$steps), nsmall=2) # calculate the median daily step counts (over 60 days)
library(reshape2); library(ggplot2) # load relevant libraries
stepsummary <- melt(data[, 1:2], id = "date")
stepsumm <- dcast(stepsummary, date ~ variable, fun.aggregate = sum, na.rm = TRUE)
datecount <- as.numeric(max(data$date)-min(data$date))
hist(stepsumm$steps, xlab = "Total Daily Step Counts", main = paste("Histogram of Total Step Counts per day \nover", datecount, "days"), breaks=15) #plot histogram
stepmean <- format(mean(stepsumm$steps), nsmall=2) # calculate the mean daily step counts (over 60 days)
stepmed <- format(median(stepsumm$steps), nsmall=2) # calculate the median daily step counts (over 60 days)
head(stepsumm)
colnames(stepsumm)[1] <- date2
colnames(stepsumm)[1] <- "date2"
head(stepsumm)
stepint <- melt(stepdata[, c(1, 3)], id = "interval")
stepintsumm <- dcast(stepint, interval ~ variable, fun.aggregate = mean, na.rm = TRUE)
stepdata <- read.csv(unz("./activity.zip", "activity.csv"))
stepdata$date <- as.Date(stepdata$date, "%Y-%m-%d") # format date vars to R date vars
stepint <- melt(stepdata[, c(1, 3)], id = "interval")
stepintsumm <- dcast(stepint, interval ~ variable, fun.aggregate = mean, na.rm = TRUE)
colnames(stepintsumm)[2] <- "meansteps"
# fill in the missing entries
newstepdata <- merge(stepdata, stepintsumm)
nrow(newstepdata)
nrow(stepdata)
head(newstepdata)
with(newstepdata, imputed_steps = if(is.na(steps)){imputed_steps=meansteps} else{imputed_steps=steps})
newstepdata$imputed_steps = if(is.na(newstepdata$steps)){newstepdata$imputed_steps=newstepdata$meansteps} else{newstepdata$imputed_steps=newstepdata$steps})
newstepdata$imputed_steps = if(is.na(newstepdata$steps)){newstepdata$imputed_steps=newstepdata$meansteps} else{newstepdata$imputed_steps=newstepdata$steps}
with(newstepdata, imputed_steps = if(is.na(steps)){meansteps} else{steps})
newstepdata$imputed_steps = if(is.na(newstepdata$steps)){newstepdata$meansteps} else{newstepdata$steps})
newstepdata$imputed_steps = if(is.na(newstepdata$steps)){newstepdata$meansteps} else{newstepdata$steps}
head(newstepdata)
with(newstepdata, imputed_steps = if(steps>0){steps} else{meansteps})
newstepdata$imputed_steps = if(newstepdata$steps>0){newstepdata$steps} else{newstepdata$meansteps}
head(newstepdata)
newstepdata$imputed_steps = if(newstepdata$steps>=0){newstepdata$steps} else{newstepdata$meansteps}
tail(newstepdata)
with(newstepdata, imputed_steps = ifelse((steps>0),steps,meansteps))
?ifelse
newstepdata$imputed_steps = ifelse((newstepdata$steps>0),newstepdata$steps,newstepdata$meansteps)
head(newstepdata)
newstepdata$imputed_steps = ifelse(is.na(newstepdata$steps), newstepdata$meansteps,newstepdata$steps)
head(newstepdata)
with(newstepdata, imputed_steps = ifelse(is.na(steps), meansteps,steps))
newstepsummary <- melt(newstepdata[, c(3, 5)], id="date")
newstepsumm <- dcast(newstepsummary, date ~ variable, fun.aggregate=sum)
newstepmean <- format(mean(newstepsumm$imputed_steps), nsmall=2)
newstepmean
newstepmed <- format(median(newstepsumm$imputed_steps), nsmall=2)
newstepmed
?weekdays
test <- weekdays(stepdata$date)
test
head(newstepdata)
newstepdata$daytype <- ifelse(weekdays(newstepdata$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
head(newstepdata)
daystepsummary <- melt(newstepdata[, c(1,5, 6)], id=c("interval", "daytype"))
daystepsumm <- dcast(daystepsummary, interval + daytype ~ variable, fun.aggregate=mean)
head(daystepsumm)
?qplot
qplot(interval, imputed_steps, data=daystepsumm, facets = . ~ daytype)
qplot(interval, imputed_steps, data=daystepsumm, facets = . ~ daytype, type="l")
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l")
?qplot
p <- qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ .)
p + geom_line()
p + geom_line() + theme_bw()
library(lattice)
xyplot(interval ~ imputed_steps | daytype, data=daystepsumm, layout = c(2, 1))
xyplot(interval ~ imputed_steps | daytype, data=daystepsumm, layout = c(1,2))
p + geom_line() + theme_bw()
p + geom_line() + theme_bw() + guides(colour = guide_legend(override.aes = list(shape = NA)))
p + geom_line() + theme_bw() + geom_point()
p + geom_line() + theme_bw() + geom_point(alpha=0)
?geom_point
?geom_line
?qplot
?geom
example(qplot)
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="jitter")
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="line")
?qplot
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="line", ylab="Number of steps")
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="line", ylab="Number of steps", ylim=250)
?qplot
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="line", ylab="Number of steps", ylim=c(0, 250)
)
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="line", ylab="Number of steps", ylim=c(0, 250))+theme_bw()
qplot(interval, imputed_steps, data=daystepsumm, facets = daytype ~ ., type="l", geom="line", ylab="Number of steps", ylim=c(0, 250))+theme_bw()+facet_wrap(daytype ~., nrow=2)
g <- ggplot(daystepsumm, aes(interval, imputed_steps))
g + geom_line()
g + geom_line()+facet_wrap(daytype ~.)
g + geom_line()+facet_wrap(daytype ~ interval)
g + geom_line()
g + geom_line()+facet_wrap(daytype, nrow=2)
p + theme_bw()
max_int <- with(stepintsumm, stepintsumm[steps==max_ave, "interval"])
